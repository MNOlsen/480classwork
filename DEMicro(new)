library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all

entity DEMicro is
	generic (address_width	: integer := 10;
				data_width		: integer := 16);
				
	port(	clock, reset				: in std_logic;
			clk_sel, button_clock	: in std_logic;
			switches						: in std_logic_vector(7 downto 0); 
			LEDS							: out std_logic_vector(7 downto 0);
			PC_out						: out std_logic_vector(address_width-1 downto 0);
			reg_ac_out					: out std_logic_vector(data_width-1 downto 0);
			memory_data_reg_out		: out std_logic_vector(data_width-1 downto 0);
			memory_address_reg_out	: out std_logic_vector(address_width-1 downto 0);
			memory_write_out			: out std_logic);
end DEMicro;

architecture rtl of DEMicro is
type ram is array(0 to 2 ** address_width-1) of unsigned(data_width-1 downto 0);
signal ram_block : ram;
attribute ram_init_file	: string;
attribute ram_init_file of ram_block : signal is "program.mif";

type FSM is (reset, fetch, decode, 
				 execute_add, execute_store, execute_store2, execute_load, execute_JMP, 
				 execute_jn, execute_jn2, execute_sub, execute_inc, execute_or,
				 execute_and, execute_not, execute_jp, execute_jp2, execute_jz,
				 execute_jz2, execute_shl, execute_shr, execute_in, execute_out,
				 execute_XOR, execute_READ, execute_WRITE, execute_DEC,
				 execute_NAND, execute_NOR, execute_sra, execute_sla,
				 execute_sw, execute_sw2, execute_lw, execute_slt, execute_sb,
				 execute_sb2, execute_lb, execute_NOP, execute_brk, execute_clz);

signal state					: FSM;
signal instruction_reg		: unsigned(data_width-1 downto 0);
signal opcode					: unsigned(4 downto 0);
signal reg_sel					: std_logic;
signal memory_data_reg		: unsigned(data_width-1 downto 0);
signal reg_ac					: signed(data_width-1 downto 0);
signal PC						: unsigned(address_width-1 downto 0);
signal memory_address_reg	: unsigned(address_width-1 downto 0);
signal memory_write			: std_logic;

signal R0						: std_logic_vector(15 downto 0);
signal R1						: std_logic_vector(15 downto 0);


signal my_clock				: std_logic;
signal clk_125mhz				: std_logic;

begin
--output major signals
PC_out							<= std_logic_vector(PC);
reg_ac_out						<= std_logic_vector(reg_ac);
memory_data_reg_out 			<= std_logic_vector(memory_data_reg);
memory_address_reg_out		<= std_logic_vector(memory_address_reg);
memory_write_out 				<= memory_write;
opcode							<= instruction_reg(15 downto 11);
reg_sel							<= std_logic(instruction_reg(10));

clocks: entity work.clk_div(behavior)
	port map (clock_50mhz => clock, clock_125hz => clk_125mhz);
	
	process(clock,clk_125mhz )
		--clock multiplexer
		if clk_sel= '0' then 
			my_clock <= clk_125mhz;
		else
			my_clock <= button_clock;
		end if;
		
		if rising_edge(my_clock) then 
			if memory_write = '1' then 
				ram_block(to_integer(memory_address_reg)) <= unsigned(reg_ac);
			end if;
			memory_data_reg <= ram_block(to_integer(memory_address_reg));
		end if;
	end process; 
	
	
	process(clock,clk_125mhz )
		--clock multiplexer
		if clk_sel= '0' then 
			my_clock <= clk_125mhz;
		else
			my_clock <= button_clock;
		end if;
		
		-- register multiplexer
		if reg_sel =  '0' then 
			REG <= R0;
		else 
			REG <= R1;
		end if;
		
		--start of code
		if rising_edge(my_clock) then 
			case state is
				when decode => 
					case opcode is 
						when "00000" => state <= execute_ADD;
						when "00001" => state <= execute_STORE;
						when "00010" => state <= execute_LDR;
						when "00011" => state <= execute_JMP;
						when "00100" => state <= execute_JN;
						when "00101" => state <= execute_SUB;
						when "00110" => state <= execute_INC;
						when "00111" => state <= execute_OR;
						when "01000" => state <= execute_AND;
						when "01001" => state <= execute_NOT;
						when "01010" => state <= execute_JP;
						when "01011" => state <= execute_JZ;
						when "01100" => state <= execute_SHL;
						when "01101" => state <= execute_SHR;
						when "01110" => state <= execute_IN;
						when "01111" => state <= execute_OUT;
						--START OF USER DEFINED
						when "10000" => state <= execute_XOR;
						when "10001" => state <= execute_READ;
						when "10010" => state <= execute_WRITE;
						when "10011" => state <= execute_DEC;
						when "10100" => state <= execute_NAND;
						when "10101" => state <= execute_NOR;
						when "10110" => state <= execute_SRA;
						when "10111" => state <= execute_SLA;
						when "11000" => state <= execute_SW;
						when "11001" => state <= execute_LW;
						when "11010" => state <= execute_SLT;
						when "11011" => state <= execute_SB;
						when "11100" => state <= execute_LB;
						when "11101" => state <= execute_NOP;
						when "11110" => state <= execute_BRK;
						when "11111" => state <= execute_CLZ;	
				
						end case; 
				when reset => 
					PC <= (others => '0');
					reg_ac <= (others => '0');
					state <= fetch;
				
				when fetch =>
					PC <= PC +1;
					instruction_reg <= memory_data_reg;
					state <= decode;
--beginning of executing instructions

				when execute_ADD =>
					reg_ac <= reg_ac + signed(memory_data_reg);
					state <= fetch ; -- this should theoretically send it to the next state.
					
				when execute_ST0RE	=> 
					state <= execute_STORE2;
				
				when execute_STORE2 =>
					state <= fetch; 
				
				when execute_LDR => 
					reg_ac <= signed(memory_data_reg); 
					state <= fetch;
				
				when execute_JMP => -- does this need 2 clock cycles?
					PC <= instruction_reg(address_width -1 downto 0);
					state <= fetch;
				
				when execute_JN => 
					if (reg_ac < 0 ) then 
						PC <= instruction_reg(address_width - 1 downto 0); 
					end if;
					state <= execute_JN2; 
				
				when execute_JN2 =>
					state <= fetch;
					
				when execute_SUB =>
					reg_ac <= reg_ac = signed(memory_data_reg); 
					state <= fetch;
				
				when execute_INC =>
					reg_ac <= reg_ac + 1;
					state <= fetch; 
				
				when execute_OR => 
					reg_ac <= reg_ac OR signed(memory_data_reg);
					state <= fetch;
				
				when execute_AND =>
					reg_ac <= reg_ac AND signed(memory_data_reg);
					state <= fetch;
				
				when execute_NOT => 
					reg_ac <= NOT reg_ac;
					state <= fetch;
				
				when execute_JP =>
					if (reg_ac > 0 ) then 
						PC <= instruction_reg(address_width - 1 downto 0); 
					end if;
					state <= execute_JP2;
				
				when execute_JP2 =>
					state <= fetch;
				
				when execute_JZ => 
					if (reg_ac = 0 ) then 
						PC <= instruction_reg(address_width - 1 downto 0); 
					end if;
					state <= execute_JZ2;
				
				when execute_JZ2 =>
					state <= fetch;
				
				when execute_SHL =>
					reg_ac <= reg_ac sll 1;
					state <= fetch;
				
				when execute_SHR =>
					reg_ac <= reg_ac srl 1; 
					state <= fetch; 
				
				when execute_IN =>
					reg_ac(7 downto 0) <= switches(7 downto 0);
					state <= fetch;
				
				when execute_out =>
					leds(7 downto 0) <= reg_ac(7 downto 0); 
					state <= fetch; 
					
				when execute_XOR =>
					reg_ac <= reg_ac XOR signed(memory_data_reg);
					state <= fetch;
				
				when execute_READ =>
				
				when execute_wRITE =>
				
				when execute_DEC =>
					reg_ac <= reg_ac - 1;
					state <= fetch;
					
				when execute_NAND => 
					reg_ac <= reg_ac NAND signed(memory_data_reg);
					state <= fetch;
				
				when execute_nor =>
					reg_ac <= reg_ac NOR signed(memory_data_reg);
					state <= fetch;
				
				when execute_srA => 
					reg_ac <= reg_ac sra 1;
					state <= fetch;
				
				when execute_sla =>
					reg_ac <= reg_ac sla 1;
					state <= fetch;
				
				when execute_sw =>
					state <= execute_sw2;
					
				when execute_sw2 =>
					state <= fetch;
					
				when execute_LW =>
					reg_ac(3 downto 0) <= signed(memory_data_reg(3 downto 0));
					state <= fetch;
				
				when execute_SLT =>
					
					state <= fetch;
				
				when execute_sb =>
					state <= execute_sb2;
				
				when execute_sb2 =>
					state <= fetch;
				
				when execute_lb =>
					reg_ac(0) <= signed(memory_data_reg(0));
					state <= fetch;
				
				when execute_NOP =>
					state <= fetch;
				
				when execute_brk =>
			
					state <= fetch;
				
				when execute_clz =>
					
					state <= fetch;
		
				when others => 
					state <= fetch;
				
			end case;
		end if;
	end process;
	
	with state select
		memory_address_reg <=
			(others => '0') when reset,
			PC when fetch,
			instruction_reg(address_width-1 downto 0) when decode,
			PC when execute_ADD,
			instruction_reg(address_width-1 downto 0) when execute_ST0RE,
			PC when execute_STORE2,
			PC when execute_LDR,
			instruction_reg(address_width-1 downto 0) when execute_JMP,
			PC when execute_JN,
			PC when execute_JN2,
			PC when execute_SUB,
			PC when execute_INC, --not sure on this one
			PC when execute_OR,
			PC when execute_AND,
			PC when execute_NOT,
			PC when execute_JP,
			PC when execute_JP2
			PC when execute_JZ,
			PC when execute_JZ2,
			PC when execute_SHL, --not sure on this one
			PC when execute_SHR, --not sure on this one
			PC when execute_IN, --not sure on this one
			PC when execute_OUT, --not sure on this one
			PC when execute_XOR,
			when execute_READ, --don't know where to start
			when execute_WRITE, --don't know where to start
			PC when execute_DEC, --not sure on this one
			PC when execute_NOR,
			PC when execute_NAND,
			PC when execute_SRA, --not sure on this one
			PC when execute_SLA, --not sure on this one
			PC when execute_SLT,	--not sure on this one
			instruction_reg(address_width-1 downto 0) when execute_SB,
			PC when execute_NOP, --not sure on this one
			PC when execute_BRK, --not sure on this one
			PC when execute_CLZ; --not sure on this one
		memory_address_reg(3 downto 0) <=
			instruction_reg(3 downto 0) when execute_SW,
			PC(3 downto 0) when execute_SW2,
			PC(3 downto 0) when execute_LW;
		memory_address_reg(0) <=
			instruction_reg(0) when execute_SB,
			PC(0) when execute_SB2,
			PC(0) when execute_LB;
	
	with state select
		memory_write <= '1' when execute_STORE,
							 '1' when execute_sw,
							 '1' when execute_sb;
							 '0' when others;
			
end rtl;
